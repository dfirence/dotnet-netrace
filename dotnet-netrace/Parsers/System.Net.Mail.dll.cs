//<autogenerated/>
using System;
using System.Diagnostics;
using System.Text;
using Address = System.UInt64;
// ReSharper disable All

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftSystemNetMail;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MicrosoftSystemNetMailTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-System-Net-Mail";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x42c8027b), unchecked((short) 0xf048), unchecked((short) 0x58d2), 0x53, 0x7d, 0xa4, 0xa9, 0xd5, 0xee, 0x70, 0x38);
        public enum Keywords : long
        {
            Default = 0x1,
            Debug = 0x2,
            Enterexit = 0x4,
            Session3 = 0x100000000000,
            Session2 = 0x200000000000,
            Session1 = 0x400000000000,
            Session0 = 0x800000000000,
        };

        public MicrosoftSystemNetMailTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<AcceptSecurityContextArgs> AcceptSecurityContext
        {
            add
            {
                source.RegisterEventTemplate(AcceptSecurityContextTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<AcquireCredentialsHandleArgs> AcquireCredentialsHandle
        {
            add
            {
                source.RegisterEventTemplate(AcquireCredentialsHandleTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<AcquireDefaultCredentialArgs> AcquireDefaultCredential
        {
            add
            {
                source.RegisterEventTemplate(AcquireDefaultCredentialTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<AssociateArgs> Associate
        {
            add
            {
                source.RegisterEventTemplate(AssociateTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<CriticalFailureArgs> CriticalFailure
        {
            add
            {
                source.RegisterEventTemplate(CriticalFailureTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<EnterArgs> Enter
        {
            add
            {
                source.RegisterEventTemplate(EnterTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<EnumerateSecurityPackagesArgs> EnumerateSecurityPackages
        {
            add
            {
                source.RegisterEventTemplate(EnumerateSecurityPackagesTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<ErrorMessageArgs> ErrorMessage
        {
            add
            {
                source.RegisterEventTemplate(ErrorMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<EventSourceMessageArgs> EventSourceMessage
        {
            add
            {
                source.RegisterEventTemplate(EventSourceMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ProviderGuid);
            }
        }
        public event Action<ExitArgs> Exit
        {
            add
            {
                source.RegisterEventTemplate(ExitTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<InfoArgs> Info
        {
            add
            {
                source.RegisterEventTemplate(InfoTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<InitializeSecurityContextArgs> InitializeSecurityContext
        {
            add
            {
                source.RegisterEventTemplate(InitializeSecurityContextTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<OperationReturnedSomethingArgs> OperationReturnedSomething
        {
            add
            {
                source.RegisterEventTemplate(OperationReturnedSomethingTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<SecurityContextInputBuffersArgs> SecurityContextInputBuffers
        {
            add
            {
                source.RegisterEventTemplate(SecurityContextInputBuffersTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<SspiPackageNotFoundArgs> SspiPackageNotFound
        {
            add
            {
                source.RegisterEventTemplate(SspiPackageNotFoundTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AcceptSecurityContextArgs AcceptSecurityContextTemplate(Action<AcceptSecurityContextArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AcceptSecurityContextArgs(action, 15, 65519, "AcceptSecurityContext", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AcquireCredentialsHandleArgs AcquireCredentialsHandleTemplate(Action<AcquireCredentialsHandleArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AcquireCredentialsHandleArgs(action, 11, 65523, "AcquireCredentialsHandle", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AcquireDefaultCredentialArgs AcquireDefaultCredentialTemplate(Action<AcquireDefaultCredentialArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AcquireDefaultCredentialArgs(action, 10, 65524, "AcquireDefaultCredential", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private AssociateArgs AssociateTemplate(Action<AssociateArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AssociateArgs(action, 3, 65531, "Associate", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private CriticalFailureArgs CriticalFailureTemplate(Action<CriticalFailureArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CriticalFailureArgs(action, 6, 65528, "CriticalFailure", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EnterArgs EnterTemplate(Action<EnterArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EnterArgs(action, 1, 65533, "Enter", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EnumerateSecurityPackagesArgs EnumerateSecurityPackagesTemplate(Action<EnumerateSecurityPackagesArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EnumerateSecurityPackagesArgs(action, 8, 65526, "EnumerateSecurityPackages", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ErrorMessageArgs ErrorMessageTemplate(Action<ErrorMessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ErrorMessageArgs(action, 5, 65529, "ErrorMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private EventSourceMessageArgs EventSourceMessageTemplate(Action<EventSourceMessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EventSourceMessageArgs(action, 0, 65534, "EventSourceMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private ExitArgs ExitTemplate(Action<ExitArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ExitArgs(action, 2, 65532, "Exit", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private InfoArgs InfoTemplate(Action<InfoArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new InfoArgs(action, 4, 65530, "Info", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private InitializeSecurityContextArgs InitializeSecurityContextTemplate(Action<InitializeSecurityContextArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new InitializeSecurityContextArgs(action, 12, 65522, "InitializeSecurityContext", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private OperationReturnedSomethingArgs OperationReturnedSomethingTemplate(Action<OperationReturnedSomethingArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OperationReturnedSomethingArgs(action, 16, 65518, "OperationReturnedSomething", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SecurityContextInputBuffersArgs SecurityContextInputBuffersTemplate(Action<SecurityContextInputBuffersArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SecurityContextInputBuffersArgs(action, 14, 65520, "SecurityContextInputBuffers", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private SspiPackageNotFoundArgs SspiPackageNotFoundTemplate(Action<SspiPackageNotFoundArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SspiPackageNotFoundArgs(action, 9, 65525, "SspiPackageNotFound", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[15];
                templates[0] = EventSourceMessageTemplate(null);
                templates[1] = EnterTemplate(null);
                templates[2] = ExitTemplate(null);
                templates[3] = InfoTemplate(null);
                templates[4] = ErrorMessageTemplate(null);
                templates[5] = CriticalFailureTemplate(null);
                templates[6] = AssociateTemplate(null);
                templates[7] = EnumerateSecurityPackagesTemplate(null);
                templates[8] = SspiPackageNotFoundTemplate(null);
                templates[9] = AcquireDefaultCredentialTemplate(null);
                templates[10] = AcquireCredentialsHandleTemplate(null);
                templates[11] = InitializeSecurityContextTemplate(null);
                templates[12] = AcceptSecurityContextTemplate(null);
                templates[13] = OperationReturnedSomethingTemplate(null);
                templates[14] = SecurityContextInputBuffersTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftSystemNetMail
{
    public sealed class AcceptSecurityContextArgs : TraceEvent
    {
        public string credential { get { return GetUnicodeStringAt(0); } }
        public string context { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public ContextFlags inFlags { get { return (ContextFlags)GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal AcceptSecurityContextArgs(Action<AcceptSecurityContextArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AcceptSecurityContextArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "credential", credential);
             XmlAttrib(sb, "context", context);
             XmlAttrib(sb, "inFlags", inFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "credential", "context", "inFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return credential;
                case 1:
                    return context;
                case 2:
                    return inFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<AcceptSecurityContextArgs> m_target;
        #endregion
    }
    public sealed class AcquireCredentialsHandleArgs : TraceEvent
    {
        public string packageName { get { return GetUnicodeStringAt(0); } }
        public CredentialUse intent { get { return (CredentialUse)GetInt32At(SkipUnicodeString(0)); } }
        public string authdata { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal AcquireCredentialsHandleArgs(Action<AcquireCredentialsHandleArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AcquireCredentialsHandleArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "packageName", packageName);
             XmlAttrib(sb, "intent", intent);
             XmlAttrib(sb, "authdata", authdata);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "packageName", "intent", "authdata"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return packageName;
                case 1:
                    return intent;
                case 2:
                    return authdata;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<AcquireCredentialsHandleArgs> m_target;
        #endregion
    }
    public sealed class AcquireDefaultCredentialArgs : TraceEvent
    {
        public string packageName { get { return GetUnicodeStringAt(0); } }
        public CredentialUse intent { get { return (CredentialUse)GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal AcquireDefaultCredentialArgs(Action<AcquireDefaultCredentialArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AcquireDefaultCredentialArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "packageName", packageName);
             XmlAttrib(sb, "intent", intent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "packageName", "intent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return packageName;
                case 1:
                    return intent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<AcquireDefaultCredentialArgs> m_target;
        #endregion
    }
    public sealed class AssociateArgs : TraceEvent
    {
        public string thisOrContextObject { get { return GetUnicodeStringAt(0); } }
        public string memberName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string first { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string second { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }

        #region Private
        internal AssociateArgs(Action<AssociateArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AssociateArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "thisOrContextObject", thisOrContextObject);
             XmlAttrib(sb, "memberName", memberName);
             XmlAttrib(sb, "first", first);
             XmlAttrib(sb, "second", second);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "thisOrContextObject", "memberName", "first", "second"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return thisOrContextObject;
                case 1:
                    return memberName;
                case 2:
                    return first;
                case 3:
                    return second;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<AssociateArgs> m_target;
        #endregion
    }
    public sealed class CriticalFailureArgs : TraceEvent
    {
        public string thisOrContextObject { get { return GetUnicodeStringAt(0); } }
        public string memberName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string message { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal CriticalFailureArgs(Action<CriticalFailureArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CriticalFailureArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "thisOrContextObject", thisOrContextObject);
             XmlAttrib(sb, "memberName", memberName);
             XmlAttrib(sb, "message", message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "thisOrContextObject", "memberName", "message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return thisOrContextObject;
                case 1:
                    return memberName;
                case 2:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 2; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<CriticalFailureArgs> m_target;
        #endregion
    }
    public sealed class EnterArgs : TraceEvent
    {
        public string thisOrContextObject { get { return GetUnicodeStringAt(0); } }
        public string memberName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string parameters { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal EnterArgs(Action<EnterArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EnterArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "thisOrContextObject", thisOrContextObject);
             XmlAttrib(sb, "memberName", memberName);
             XmlAttrib(sb, "parameters", parameters);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "thisOrContextObject", "memberName", "parameters"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return thisOrContextObject;
                case 1:
                    return memberName;
                case 2:
                    return parameters;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<EnterArgs> m_target;
        #endregion
    }
    public sealed class EnumerateSecurityPackagesArgs : TraceEvent
    {
        public string securityPackage { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal EnumerateSecurityPackagesArgs(Action<EnumerateSecurityPackagesArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EnumerateSecurityPackagesArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "securityPackage", securityPackage);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "securityPackage"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return securityPackage;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<EnumerateSecurityPackagesArgs> m_target;
        #endregion
    }
    public sealed class ErrorMessageArgs : TraceEvent
    {
        public string thisOrContextObject { get { return GetUnicodeStringAt(0); } }
        public string memberName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string message { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal ErrorMessageArgs(Action<ErrorMessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ErrorMessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "thisOrContextObject", thisOrContextObject);
             XmlAttrib(sb, "memberName", memberName);
             XmlAttrib(sb, "message", message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "thisOrContextObject", "memberName", "message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return thisOrContextObject;
                case 1:
                    return memberName;
                case 2:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<ErrorMessageArgs> m_target;
        #endregion
    }
    public sealed class EventSourceMessageArgs : TraceEvent
    {
        public string message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal EventSourceMessageArgs(Action<EventSourceMessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EventSourceMessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "message", message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<EventSourceMessageArgs> m_target;
        #endregion
    }
    public sealed class ExitArgs : TraceEvent
    {
        public string thisOrContextObject { get { return GetUnicodeStringAt(0); } }
        public string memberName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string result { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal ExitArgs(Action<ExitArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ExitArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "thisOrContextObject", thisOrContextObject);
             XmlAttrib(sb, "memberName", memberName);
             XmlAttrib(sb, "result", result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "thisOrContextObject", "memberName", "result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return thisOrContextObject;
                case 1:
                    return memberName;
                case 2:
                    return result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 4; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<ExitArgs> m_target;
        #endregion
    }
    public sealed class InfoArgs : TraceEvent
    {
        public string thisOrContextObject { get { return GetUnicodeStringAt(0); } }
        public string memberName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string message { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal InfoArgs(Action<InfoArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<InfoArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "thisOrContextObject", thisOrContextObject);
             XmlAttrib(sb, "memberName", memberName);
             XmlAttrib(sb, "message", message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "thisOrContextObject", "memberName", "message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return thisOrContextObject;
                case 1:
                    return memberName;
                case 2:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<InfoArgs> m_target;
        #endregion
    }
    public sealed class InitializeSecurityContextArgs : TraceEvent
    {
        public string credential { get { return GetUnicodeStringAt(0); } }
        public string context { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string targetName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public ContextFlags inFlags { get { return (ContextFlags)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }

        #region Private
        internal InitializeSecurityContextArgs(Action<InitializeSecurityContextArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<InitializeSecurityContextArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "credential", credential);
             XmlAttrib(sb, "context", context);
             XmlAttrib(sb, "targetName", targetName);
             XmlAttrib(sb, "inFlags", inFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "credential", "context", "targetName", "inFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return credential;
                case 1:
                    return context;
                case 2:
                    return targetName;
                case 3:
                    return inFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<InitializeSecurityContextArgs> m_target;
        #endregion
    }
    public sealed class OperationReturnedSomethingArgs : TraceEvent
    {
        public string operation { get { return GetUnicodeStringAt(0); } }
        public SECURITY_STATUS errorCode { get { return (SECURITY_STATUS)GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal OperationReturnedSomethingArgs(Action<OperationReturnedSomethingArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OperationReturnedSomethingArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "operation", operation);
             XmlAttrib(sb, "errorCode", errorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "operation", "errorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return operation;
                case 1:
                    return errorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<OperationReturnedSomethingArgs> m_target;
        #endregion
    }
    public sealed class SecurityContextInputBuffersArgs : TraceEvent
    {
        public string context { get { return GetUnicodeStringAt(0); } }
        public int inputBuffersSize { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int outputBufferSize { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public SECURITY_STATUS errorCode { get { return (SECURITY_STATUS)GetInt32At(SkipUnicodeString(0)+8); } }

        #region Private
        internal SecurityContextInputBuffersArgs(Action<SecurityContextInputBuffersArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SecurityContextInputBuffersArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "context", context);
             XmlAttrib(sb, "inputBuffersSize", inputBuffersSize);
             XmlAttrib(sb, "outputBufferSize", outputBufferSize);
             XmlAttrib(sb, "errorCode", errorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "context", "inputBuffersSize", "outputBufferSize", "errorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return context;
                case 1:
                    return inputBuffersSize;
                case 2:
                    return outputBufferSize;
                case 3:
                    return errorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<SecurityContextInputBuffersArgs> m_target;
        #endregion
    }
    public sealed class SspiPackageNotFoundArgs : TraceEvent
    {
        public string packageName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal SspiPackageNotFoundArgs(Action<SspiPackageNotFoundArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SspiPackageNotFoundArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "packageName", packageName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "packageName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return packageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 1; }
        public static string GetProviderName() { return "Microsoft-System-Net-Mail"; }
        public static Guid GetProviderGuid() { return new Guid("42c8027b-f048-58d2-537d-a4a9d5ee7038"); }
        private event Action<SspiPackageNotFoundArgs> m_target;
        #endregion
    }
    [Flags]
    public enum ContextFlags
    {
        Delegate = 0x1,
        MutualAuth = 0x2,
        ReplayDetect = 0x4,
        SequenceDetect = 0x8,
        Confidentiality = 0x10,
        UseSessionKey = 0x20,
        InitUseSuppliedCreds = 0x80,
        AllocateMemory = 0x100,
        Connection = 0x800,
        InitExtendedError = 0x4000,
        AcceptExtendedError = 0x8000,
        AcceptStream = 0x10000,
        AcceptIntegrity = 0x20000,
        InitManualCredValidation = 0x80000,
        ProxyBindings = 0x4000000,
        AllowMissingBindings = 0x10000000,
        UnverifiedTargetName = 0x20000000,
    }
    public enum CredentialUse
    {
        SECPKG_CRED_INBOUND = 0x1,
        SECPKG_CRED_OUTBOUND = 0x2,
        SECPKG_CRED_BOTH = 0x3,
    }
    public enum SECURITY_STATUS
    {
        OutOfMemory = unchecked((int)  0x80090300),
        InvalidHandle = unchecked((int)  0x80090301),
        Unsupported = unchecked((int)  0x80090302),
        TargetUnknown = unchecked((int)  0x80090303),
        InternalError = unchecked((int)  0x80090304),
        PackageNotFound = unchecked((int)  0x80090305),
        NotOwner = unchecked((int)  0x80090306),
        CannotInstall = unchecked((int)  0x80090307),
        InvalidToken = unchecked((int)  0x80090308),
        CannotPack = unchecked((int)  0x80090309),
        QopNotSupported = unchecked((int)  0x8009030a),
        NoImpersonation = unchecked((int)  0x8009030b),
        LogonDenied = unchecked((int)  0x8009030c),
        UnknownCredentials = unchecked((int)  0x8009030d),
        NoCredentials = unchecked((int)  0x8009030e),
        MessageAltered = unchecked((int)  0x8009030f),
        OutOfSequence = unchecked((int)  0x80090310),
        NoAuthenticatingAuthority = unchecked((int)  0x80090311),
        IncompleteMessage = unchecked((int)  0x80090318),
        IncompleteCredentials = unchecked((int)  0x80090320),
        BufferNotEnough = unchecked((int)  0x80090321),
        WrongPrincipal = unchecked((int)  0x80090322),
        TimeSkew = unchecked((int)  0x80090324),
        UntrustedRoot = unchecked((int)  0x80090325),
        IllegalMessage = unchecked((int)  0x80090326),
        CertUnknown = unchecked((int)  0x80090327),
        CertExpired = unchecked((int)  0x80090328),
        AlgorithmMismatch = unchecked((int)  0x80090331),
        SecurityQosFailed = unchecked((int)  0x80090332),
        SmartcardLogonRequired = unchecked((int)  0x8009033e),
        UnsupportedPreauth = unchecked((int)  0x80090343),
        BadBinding = unchecked((int)  0x80090346),
        DowngradeDetected = unchecked((int)  0x80090350),
        ApplicationProtocolMismatch = unchecked((int)  0x80090367),
        OK = 0x0,
        ContinueNeeded = 0x90312,
        CompleteNeeded = 0x90313,
        CompAndContinue = 0x90314,
        ContextExpired = 0x90317,
        CredentialsNeeded = 0x90320,
        Renegotiate = 0x90321,
    }
}
